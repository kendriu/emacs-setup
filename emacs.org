* Configuration
	I was looking how to setup emacs config in tidy way.
	And I found out about something called [[https://goo.gl/WlBA23][literal emacs config]].

** Personal information
	 I don't what the purpose of it, but everyone puts it at the begining of config file
	 #+BEGIN_SRC emacs-lisp
		 (setq user-full-name "Andrzej Skupie≈Ñ"
					 user-mail-address "kendriu@gmail.com")
	 #+END_SRC
** use-package
	 Before I start install anything I should set use-package:
	 #+BEGIN_SRC emacs-lisp
	 (require 'use-package)
	 #+END_SRC

** $PATH
	So first we wan't to be sure that emacs have the same $PATH variable like my standard shell
	#+BEGIN_SRC emacs-lisp
		(require 'eshell)
		(defun set-exec-path-from-shell-PATH ()
			(let ((path-from-shell (replace-regexp-in-string
															"[ \t\n]*$"
															""
															(shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
				(setenv "PATH" path-from-shell)
				(setq eshell-path-env path-from-shell) ; for eshell users
				(setq exec-path (split-string path-from-shell path-separator))))

		(when window-system (set-exec-path-from-shell-PATH))
	#+END_SRC
** Appearance
*** Bars and scroll bar
		I don't like additional bars and those big scrolls that emacs provides]
		#+BEGIN_SRC emacs-lisp
			(menu-bar-mode -1)
			(toggle-scroll-bar -1)
			(tool-bar-mode -1)
		#+END_SRC
*** Fullscreen
		Emacs should start always on fullscreen
		#+BEGIN_SRC emacs-lisp
			(add-to-list 'default-frame-alist '(fullscreen . maximized))
		#+END_SRC

*** Show key combination
		Emacs should show instantly what combination of keys i try to achieve
		#+BEGIN_SRC emacs-lisp
			(setq echo-keystrokes 0.1
						use-dialog-box nil)
		#+END_SRC

*** Theme
		First I'm setting main theme
		#+BEGIN_SRC emacs-lisp
			(setq custom-safe-themes t)
			(setq frame-background-mode 'dark)
			(set-terminal-parameter nil 'background-mode 'dark)
			(use-package solarized-theme
				:ensure t
				:init
				(setq custom-safe-themes t)
				:config
				(load-theme 'solarized-dark))
		#+END_SRC

		And than I have to install airline theme
		#+BEGIN_SRC emacs-lisp
			(use-package airline-themes
				:ensure t
				:init
				(use-package powerline)
				:config
				(load-theme 'airline-solarized-alternate-gui))
				;;(load-theme 'airline-molokai))
		#+END_SRC
*** Yascroll
		I Like this fancy look of yascroll
		#+BEGIN_SRC emacs-lisp
			(use-package yascroll
				:ensure t
				:config
				(global-yascroll-bar-mode 1))
		#+END_SRC
*** Cursor
	 In vim cursor doesn't blink, so in emacs shouldn't to
	 #+BEGIN_SRC emacs-lisp
		 (blink-cursor-mode -1)
	 #+END_SRC

	 Beacon-mode shows where cursor is, after screen scroll or switching window
	 #+BEGIN_SRC emacs-lisp
		 (use-package beacon
			 :ensure t
			 :config
			 (beacon-mode 1))
	 #+END_SRC

*** Ignore bell ring
		I wan't to ignore bell ring
		#+BEGIN_SRC emacs-lisp
			(setq ring-bell-function 'ignore)
		#+END_SRC

*** Trailing Whitespace
		If there are any trailing spaces hihghlight theme in red
		#+BEGIN_SRC emacs-lisp
			(setq show-trailing-whitespace t)
		#+END_SRC

		Cleanup trailing whitespaces on save
		#+BEGIN_SRC emacs-lisp
			(use-package whitespace-cleanup-mode
				:ensure t
				:config
				(global-whitespace-cleanup-mode))
		#+END_SRC

*** Rainbow delimiters
		It is easier to find matching parenthase when it has unique color
		#+BEGIN_SRC emacs-lisp
			(use-package rainbow-delimiters
				:ensure t
				:config
				(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
				(add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
				(add-hook 'lisp-mode-hook 'rainbow-delimiters-mode))
		#+END_SRC
*** Relative line numbers
		I writed defadvice for relative line numbers so it shows line number in current line
		#+BEGIN_SRC emacs-lisp
			(use-package relative-line-numbers
				:ensure t
				:config
				(defadvice relative-line-numbers-default-format ( around current-line (arg) activate)
					"If offset is 0 then return current line"
					(if (= arg 0)
							(ad-set-arg 0 (line-number-at-pos)))
					ad-do-it)
				(global-relative-line-numbers-mode))
		#+END_SRC
*** Splash screen
		Who needs splash screen anyway
		#+BEGIN_SRC emacs-lisp
			(setq inhibit-startup-message t)
		#+END_SRC
** Edition
*** Markdown
		Turns out that markdown-mode is not build in emacs
		#+BEGIN_SRC emacs-lisp
      (use-package markdown-mode
        :ensure t
        :config
        (autoload 'markdown-mode "markdown-mode"
          "Major mode for editing Markdown files" t)
        ;; Assign file extension to markdown mode
        (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
        (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
        (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode)))
		#+END_SRC
*** Yaml
		Emacs does not support yaml files by default
		#+BEGIN_SRC emacs-lisp
      (use-package yaml-mode
        :ensure t
        :config
        ;; Return key automatically indent cursor on new line
        (add-hook 'yaml-mode-hook
                  (lambda ()
                  (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
		#+END_SRC
*** Smartparens
		When I open parenhesis it should be automatically closed, same goes for quotes
		#+BEGIN_SRC emacs-lisp
			(use-package smartparens
				:ensure t
				:config
				(add-hook 'emacs-lisp-mode-hook #'smartparens-mode)
				(smartparens-global-strict-mode t))
		#+END_SRC
*** Autocomplete
		I think that autocomplition should be build in every IDE
		#+BEGIN_SRC emacs-lisp
			(use-package auto-complete
				:ensure t
				:config
				(ac-config-default)
				;; Autocompletion for org-mode
				(use-package org-ac
					:ensure t
					:config
					(org-ac/config-default)))
		#+END_SRC
*** Evil mode
		They say that emacs is a great operating system, lacking only a decent editor.
		Evil mode bring one to the table
		#+BEGIN_SRC emacs-lisp

			(use-package evil
				:ensure t
				:config
				(evil-mode t)
				(use-package evil-matchit
					:ensure t)
				(use-package evil-nerd-commenter
					:ensure t
					:config
					(evilnc-default-hotkeys))
				(use-package evil-surround
					:ensure t))
		#+END_SRC

		Evil-leader adds to evil-mode <LEADER> functionality from vim. I could load it
		together with evil mode, but it have big config section, so i preffer to store
		it separatly
		#+BEGIN_SRC emacs-lisp
			(use-package evil-leader
				:ensure t
				:config
				(global-evil-leader-mode)
				(evil-leader/set-key
					"b" 'helm-buffers-list
					"d" 'helm-projectile-find-file
					"f" 'helm-find-files
					"g" 'elpy-goto-definition
					"m" 'helm-recentf
					"s" 'helm-projectile-grep
					))
		#+END_SRC
*** Snippets
		Support of snippets in emacs
		#+BEGIN_SRC emacs-lisp
			(use-package yasnippet
				:ensure t
				:config
				(yas-global-mode 1))
		#+END_SRC
*** Tabulators
		Tabs should be 2 signs width and tabs shouldn't be use to indent lines
		#+BEGIN_SRC emacs-lisp
			(setq-default indent-tabs-mode nil)
			(setq-default tab-width 2)
      (defvaralias 'js-indent-level 'tab-width)
		#+END_SRC
*** Syntax check
		Good thing that in emacs you can check syntax on the fly
		#+BEGIN_SRC emacs-lisp
			(use-package flycheck
				:ensure t
				:config
				(add-hook 'after-init-hook #'global-flycheck-mode)
				;; flycheck looks for libraries in load-path variable
				(setq-default flycheck-emacs-lisp-load-path 'inherit)
				(setq-default flycheck-flake8-maximum-line-length 99)
				)
		#+END_SRC
*** Aggressive indent
		Emacs does all job with keeping indentation level. Always
		#+BEGIN_SRC emacs-lisp
			(use-package aggressive-indent
				:ensure t
				:config
				(global-aggressive-indent-mode 1))
		#+END_SRC
*** Mac
		Under mac text can be rendered beter and I want have Command as Meta
		and keep Option for localized input
		#+BEGIN_SRC emacs-lisp
			(when (string-match "apple-darwin" system-configuration)
				(setq mac-allow-anti-aliasing t)
				(setq mac-command-modifier 'meta)
				(setq mac-option-modifier 'none))
		#+END_SRC

** General behavior
*** Auto revert
		If file content change and it is already open in buffer emacs should auto-refresh
		buffer
		#+BEGIN_SRC emacs-lisp
			(global-auto-revert-mode 1)
		#+END_SRC
*** Short yes or no
		Emacs by default ask for whole word "yes"/"no", while "y"/"n" should be sufficient
		#+BEGIN_SRC emacs-lisp
			(defalias 'yes-or-no-p 'y-or-n-p)
		#+END_SRC
*** Open recent file
		If you want to open recent file then you should tell him that he should
		write list of recently accessed files
		#+BEGIN_SRC emacs-lisp
			(recentf-mode 1)
			(setq-default recent-save-file "~/.emacs.d/recentf")
		#+END_SRC
*** Backup files
	Backup files emac should keep in his own directory
	#+BEGIN_SRC emacs-lisp
		(setq backup-directory-alist
					`(("." . ,(expand-file-name
										 (concat user-emacs-directory "backups")))))

		;; As well as auto-save files
		(setq auto-save-file-name-transforms
					`((".*" "~/.emacs.d/backups" t)))
					

		;; Make backups of files, even when they're in version control
		(setq vc-make-backup-files t)
	#+END_SRC

*** TODO  Cursor in the same place in new session
		(Marked for TODO because I'm not sure if this works)
		If I open same file as before I wan't emacs to place cursor in place of before edition
		#+BEGIN_SRC emacs-lisp
			(require 'saveplace)
			(setq-default save-place t)
			(setq save-place-file (expand-file-name ".places" user-emacs-directory))
		#+END_SRC
*** Real escape on <ESC>
		In vim <ESC> escapes everything. I wan't emacs to do the same.
		#+BEGIN_SRC emacs-lisp
			(defun minibuffer-keyboard-quit ()
				"Abort recursive edit.
			In Delete Selection mode, if the mark is active, just deactivate it;
			then it takes a second \\[keyboard-quit] to abort the minibuffer."
				(interactive)
				(if (and delete-selection-mode transient-mark-mode mark-active)
						(setq deactivate-mark  t)
					(when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
					(abort-recursive-edit)))
			(define-key evil-normal-state-map [escape] 'keyboard-quit)
			(define-key evil-visual-state-map [escape] 'keyboard-quit)
			(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
			(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
			(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
			(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
			(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
			(global-set-key [escape] 'evil-exit-emacs-state)
		#+END_SRC
*** Change window with Shift-<arrow>
		It is definitly more convienient to use Shift-<arrow> to navigate between windows
	#+BEGIN_SRC emacs-lisp
    (windmove-default-keybindings)
    (setq windmove-wrap-around t)
	#+END_SRC	
** Navigation
*** Helm
	 Helm is great way to find something on a list. On any list.
	 #+BEGIN_SRC emacs-lisp
		 (use-package helm
			 :ensure t
			 :config
			 (helm-mode 1)
			 (bind-key "M-x" 'helm-M-x)
			 (setq helm-mode-fuzzy-match t)
			 (setq helm-M-x-fuzzy-match t)
			 ;;suppress displaying sources which are out of screen at first.
			 ;; their load will be dalayed
			 (setq helm-quick-update t))
	 #+END_SRC
*** Projectile
	 Projectile is package for project managment
	 #+BEGIN_SRC emacs-lisp
		 (use-package projectile
			 :ensure t
			 :config
			 (projectile-global-mode)
			 (setq projectile-completion-system 'helm))
	 #+END_SRC
*** Helm-projectile
		A the end I would like that helm and projectile was working together
		#+BEGIN_SRC emacs-lisp
			(use-package helm-projectile
				:ensure t
				:config
				(helm-projectile-on))
		#+END_SRC
*** Neotree
		Neotree for emacs i basically the same thing as NerdTree is for vim
	#+BEGIN_SRC emacs-lisp
		(use-package neotree
			:ensure t
			:config
			(bind-key "<f2>" 'neotree-toggle)
			(setq neo-smart-open t)
			(add-hook 'neotree-mode-hook
								(lambda ()
									(define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
									(define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
									(define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
									(define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))
			)
	#+END_SRC
** Git
	 Magit does not have any rivals in field of git integration
	 #+BEGIN_SRC emacs-lisp
		 (use-package magit
			 :ensure t
			 :bind ("C-x g" . magit-status)
			 :config
			 (setq magit-clone-set-remote.pushDefault t))
	 #+END_SRC

	 When I edit files I like to know what I changed in comparition to git repository
	 #+BEGIN_SRC emacs-lisp
		 ;; It uses: fringe-helper, nonsequitur/git-gutter-plus
		 (use-package git-gutter-fringe+
			 :ensure t
			 :config
			 (global-git-gutter+-mode))
	 #+END_SRC

** Python
	 There is nothing to say here, elpy does have it all
	 #+BEGIN_SRC emacs-lisp
		 (use-package elpy
			 :ensure t
			 :config
			 (remove-hook 'elpy-modules 'elpy-module-flymake)
			 (elpy-enable))
	 #+END_SRC

	 Django has own mode
	 #+BEGIN_SRC emacs-lisp
		 (use-package pony-mode
			 :ensure t)
	 #+END_SRC
** Javascript
# *** jsx
# 	 #+BEGIN_SRC emacs-lisp
# 		 (use-package jsx-mode
# 			 :ensure t
# 			 :config
#        (add-to-list 'auto-mode-alist '("\\.jsx\\'" . jsx-mode))
#        (autoload 'jsx-mode "jsx-mode" "JSX mode" t))
# 	 #+END_SRC
** Testing
*** Testing rest app
		REST API shold be tested from inside emacs
		#+BEGIN_SRC emacs-lisp
			(use-package restclient
				:ensure t
				)
		#+END_SRC
** Org-mode
	 Org-mode is installed in init.el.
	 Furthermore it has to installed manually with "Install-package" command.
	 Here are is some configuration
	 #+BEGIN_SRC emacs-lisp
		 (org-babel-do-load-languages
			'org-babel-load-languages
			'((emacs-lisp . t)
				(sh . t)))
		 ;; or-mode should highlight source blocks according to used language
		 (setq org-src-fontify-natively t )
	 #+END_SRC
*** Easy snippets
	 Template tp put emacs-lisp source block easy template
	 #+BEGIN_SRC emacs-lisp
		 (add-to-list 'org-structure-template-alist '("se" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
	 #+END_SRC
